version: "3.9"

######### IMPORTANT #############
# This is my main docker-compose file with most of the apps. I run docker on other systems with smaller stacks (web and synology).
# You can copy-paste services from one docker-compose file in this repo to another to add other apps.

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  zsocket_proxy:
    name: zsocket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  cf_email:
    file: $DOCKERDIR/secrets/cf_email
  cf_api_key:
    file: $DOCKERDIR/secrets/cf_api_key
  cf_token:
    file: $DOCKERDIR/secrets/cf_token
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  authelia_jwt_secret:
    file: $DOCKERDIR/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DOCKERDIR/secrets/authelia_session_secret
  authelia_storage_mysql_password:
    file: $DOCKERDIR/secrets/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: $DOCKERDIR/secrets/authelia_notifier_smtp_password
  authelia_duo_api_secret_key:
    file: $DOCKERDIR/secrets/authelia_duo_api_secret_key
  authelia_storage_encryption_key:
    file: $DOCKERDIR/secrets/authelia_storage_encryption_key
  guac_db_name:
    file: $DOCKERDIR/secrets/guac_db_name
  guac_mysql_user:
    file: $DOCKERDIR/secrets/guac_mysql_user
  guac_mysql_password:
    file: $DOCKERDIR/secrets/guac_mysql_password
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password
  my_email:
    file: $DOCKERDIR/secrets/my_email
  plex_claim:
    file: $DOCKERDIR/secrets/plex_claim
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  profiles:
    - core

x-common-keys-monitoring: &common-keys-monitoring
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  profiles:
    - monitoring
    
# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  profiles:
    - apps
# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"
  profiles:
    - media
# Keys common to some of the services in ADS-B-services.txt
x-common-keys-media: &common-keys-adsb
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"
  profiles:
    - adsb
########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/logs/traefik.log 
  # touch $DOCKERDIR/logs/access.log
  
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:latest
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      zsocket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/logs/cloudserver/traefik:/logs # for fail2ban - make sure to touch file before starting container
      - $DOCKERDIR/shared:/shared
    environment:
      - TZ=$TZ
      - CF_API_EMAIL_FILE=/run/secrets/cf_email
      - CF_API_KEY_FILE=/run/secrets/cf_api_key
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      - DOMAINNAME
    secrets:
      - cf_email
      - cf_api_key
      - htpasswd
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      zsocket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    #privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
      
  #### AUTHENTICATION 
  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia
    restart: always
    networks:
      - t2_proxy
      - default
    # ports:
    #   - "9091:9091"
    volumes:
      - $DOCKERDIR/appdata/authelia:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
     #- AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
      #- AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      #- read_buffer_size=10485760
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_mysql_password
     # - authelia_notifier_smtp_password
      - authelia_duo_api_secret_key
     #- authelia_storage_encryption_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    command: -H tcp://socket-proxy:2375
    networks:
      - t2_proxy
      - zsocket_proxy
    volumes:
      - $DOCKERDIR/appdata/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

############################# DATABASE

  # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    <<: *common-keys-core
    container_name: mariadb
    image: lscr.io/linuxserver/mariadb
    ports:
      - "$MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/appdata/mariadb:/config
    environment:
      <<: *default-tz-puid-pgid
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password

  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      - PMA_HOST=$DB_HOST
      - PMA_PORT=$DB_PORT
      #- PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  qbittorrent:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    ports: 
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - $DOCKERDIR/appdata/qbittorrent:/config
      - $DATADIR/Downloads:/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002
      WEBUI_PORT: 8168
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8168"

  ############################# INDEXERS

  # Jackett - Torrent proxy
  # Set url_base in Jackett settings if using PathPrefix
  jackett:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    # network_mode: container:transmission-vpn
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.200
    volumes:
      - $DOCKERDIR/appdata/jackett:/config
      - $DATADIR/Downloads/completed:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"


  ############################# PVRS

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.201
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      - $DATADIR/Downloads:/downloads
      - $DATADIR/Movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`movies.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`movies.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.202
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - $DATADIR/Downloads:/downloads
      - $DATADIR/Shows:/tv
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`tv.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`tv.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  ############################# MEDIA

  # Plex - Media Server
  plexms:
    <<: *common-keys-media
    image: plexinc/pms-docker:plexpass
    container_name: plexms
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "$PLEX_WEB_TOOLS_PORT:33400"
    devices:
      - /dev/dri:/dev/dri # for hardware transcoding
    volumes:
      - $DOCKERDIR/appdata/plexms:/config
      - $DATADIR:/media
      - /dev/shm:/transcode
    environment:
      TZ: $TZ
      HOSTNAME: "Silky Plex"
      PLEX_CLAIM_FILE: /run/secrets/plex_claim
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/,https://plex.$DOMAINNAME
    secrets:
      - plex_claim
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"

  # Tautulli - Previously PlexPy. Plex statistics and monitoring
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    <<: *common-keys-media
    image: linuxserver/tautulli:latest
    container_name: tautulli
    networks:
      - t2_proxy
    volumes:
      - $DOCKERDIR/appdata/tautulli/config:/config
      - $DOCKERDIR/appdata/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
    ## HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr-bypass.rule=Headers(`X-Api-Key`, `$TAUTULLI_DEVICE_KEY`) || Query(`apikey`, `$TAUTULLI_DEVICE_KEY`)"
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
        ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"      
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  ############################# MEDIA FILE MANAGEMENT
#Photo album
  piwigo:
    image: lscr.io/linuxserver/piwigo:latest
    container_name: piwigo
    restart: always
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/appdata/piwigo/config:/config
      - /mnt/Media/Photos:/gallery/upload
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
     ## HTTP Routers
      - "traefik.http.routers.piwigo-rtr.entrypoints=https"
      - "traefik.http.routers.piwigo-rtr.rule=Host(`photos.$DOMAINNAME`)"
      - "traefik.http.routers.piwigo-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.piwigo-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.piwigo-rtr.service=piwigo-svc"
      - "traefik.http.services.piwigo-svc.loadbalancer.server.port=80"

  ############################# UTILITIES
  pihole_exporter:
    #build:
     # context: ./
      #args:
       # ARCH: CHANGE_ME
      #dockerfile: Dockerfile
    image: ekofr/pihole-exporter:latest
    container_name: pihole_exporter
    <<: *common-keys-apps
    #expose:
     # - 9617
    environment:
      PIHOLE_HOSTNAME: 172.16.0.2 
      PIHOLE_PORT: 80
      #PIHOLE_PASSWORD: CHANGE_ME
      INTERVAL: 30s
      PORT: 9617


  # Glances - System Information
  glances:
    <<: *common-keys-apps
    image: nicolargo/glances:latest
    container_name: glances
    # network_mode: host
    networks:
      - t2_proxy
      - zsocket_proxy
      - default
    pid: host
    volumes:
      - $DOCKERDIR/appdata/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $USERDIR:/data/home:ro
      - $DATADIR:/RAID:ro
    environment:
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      - t2_proxy
      - zsocket_proxy
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - zsocket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    <<: *common-keys-core
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    environment:
      API_KEY: $CLOUDFLARE_API_TOKEN
      ZONE: $DOMAINNAME
      PROXIED: "true"
      RRTYPE: A
      DELETE_ON_STOP: "false"
      DNS_SERVER: 172.16.0.2
      
### UniFi Controller - Managing UniFi Network
  unifi:
    container_name: unifi
    image: jacobalberty/unifi:latest
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.100
    security_opt:
      - no-new-privileges:true
    ports:
      - "8080:8080"
      - "8443:8443"
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "6789:6789"
    volumes:
      - $DOCKERDIR/appdata/unifi:/unifi
      - $DOCKERDIR/appdata/unifi/data:/unifi/data
      - $DOCKERDIR/appdata/unifi/log:/unifi/log
      - $DOCKERDIR/appdata/unifi/cert:/unifi/cert
      - $DOCKERDIR/appdata/unifi/init:/unifi/init.d
      - $DOCKERDIR/appdata/unifi/run:/var/run/unifi
      - $DOCKERDIR/shared/certs/key.pem:/unifi/cert/privkey.pem
      - $DOCKERDIR/shared/certs/cert.pem:/unifi/cert/cert.pem
    environment:
      UNIFI_UID: $PUID
      UNIFI_GID: $PGID
      TZ: America/Phoenix
      RUNAS_UID0: "false"
      BIND_PRIV: "false"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      - "traefik.http.routers.unifi-rtr.rule=HostHeader(`uni.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    <<: *common-keys-apps
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none
      TZ: $TZ
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.199
     #ports:
     #  - "${PORT:-8191}:8191"

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    <<: *common-keys-monitoring # See EXTENSION FIELDS at the top
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "$GRAFANA_PORT:3000"
    user: ${PUID}:${PGID}
    volumes:
      - $DOCKERDIR/appdata/grafana:/var/lib/grafana
      - $DOCKERDIR/appdata/grafana/provisioning/:/etc/grafana/provisioning/
      - $DOCKERDIR/appdata/grafana/dashboards/:/var/lib/grafana/dashboards/
      - $DOCKERDIR/appdata/grafana/grafana.ini:/etc/grafana/grafana.ini
      - $DOCKERDIR/appdata/vrs/root:/var/lib/vrsdb/:ro
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      TZ: ${TZ}    
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"
      
  sql-server-db:
    container_name: sql
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      - t2_proxy
    ports:
      - "1433:1433"
    user: root
    volumes:
      - ${DOCKERDIR}/appdata/mssql/data:/var/opt/mssql/data
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      SA_PASSWORD: "!!54testpassword45!!"
      ACCEPT_EULA: "Y"
      TZ: $TZ
      
  prometheus:
    <<: *common-keys-monitoring # See EXTENSION FIELDS at the top
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - $DOCKERDIR/appdata/prometheus/config:/etc/prometheus
      - $DOCKERDIR/appdata/prometheus/data:/prometheus
    user: $PUID:$PGID
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.listen-address=:9090'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prometheus-rtr.entrypoints=https"
      - "traefik.http.routers.prometheus-rtr.rule=Host(`prom.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prometheus-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.prometheus-rtr.service=prometheus-svc"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    <<: *common-keys-monitoring
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_BUCKET=readsb
      - DOCKER_INFLUXDB_INIT_ORG=readsb
      #- DOCKER_INFLUXDB_INIT_RETENTION=1y
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    ports:
      - '8086:8086'
    volumes:
      - $DOCKERDIR/appdata/influx/influxdb_data:/var/lib/influxdb
      - $DOCKERDIR/appdata/influx/influxdb_config:/etc/influxdb
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.influx-rtr.entrypoints=https"
      - "traefik.http.routers.influx-rtr.rule=Host(`influx.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.influx-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.influx-rtr.service=influx-svc"
      - "traefik.http.services.influx-svc.loadbalancer.server.port=8086"
        
  dump1090-exporter:
    image: clawsicus/dump1090exporter:latest
    container_name: dump1090e
    <<: *common-keys-monitoring
    command:
      - '--resource-path=http://tar1090/data'
      - '--latitude=${FEEDER_LAT}'
      - '--longitude=${FEEDER_LONG}'
    #ports:
      #- 9105:9105
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dump1090e-rtr.entrypoints=https"
      - "traefik.http.routers.dump1090e-rtr.rule=Host(`dump1090e.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dump1090e-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.dump1090e-rtr.service=dump1090e-svc"
      - "traefik.http.services.dump1090e-svc.loadbalancer.server.port=9105"
  piaware-exporter:
    image: clawsicus/dump1090exporter:lastest
    container_name: piaware-e
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    command:
      - '--resource-path=http://piaware:8080/data'
      - '--latitude=${FEEDER_LAT}'
      - '--longitude=${FEEDER_LONG}'
    #ports:
      #- 9105:9105
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dump1090e-rtr.entrypoints=https"
      - "traefik.http.routers.dump1090e-rtr.rule=Host(`dump1090e.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dump1090e-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.dump1090e-rtr.service=dump1090e-svc"
      - "traefik.http.services.dump1090e-svc.loadbalancer.server.port=9105"
  node-exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:latest
    <<: *common-keys-monitoring
    command: [
      "--path.rootfs=/host",
      "--web.listen-address=:9100",
    ]
    #ports:
        #- 9100:9100
    volumes:
        - "/:/host:ro,rslave"

  piaware-exporter:
    container_name: piaware_exporter
    image: piaware_exporter:2.0
    <<: *common-keys-monitoring
    #ports:
        #- 9101:9101
    command: [
      "--piaware_host",
      "192.168.90.13"
    ]

######## ADSB #######

  tar1090:
    image: ghcr.io/sdr-enthusiasts/docker-tar1090:latest
    tty: true
    container_name: tar1090
    <<: *common-keys-adsb
    environment:
      - UPDATE_TAR1090=true
      - TZ=${TZ}
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TAR1090_DEFAULTCENTERLAT=${FEEDER_LAT}
      - TAR1090_DEFAULTCENTERLON=${FEEDER_LONG}
      - MLATHOST=mlathub
      - ENABLE_978=yes
      - "URL_978=http://beast.${DOMAINLOCAL}:30980/skyaware978"
    volumes:
      - "$DOCKERDIR/appdata/1090/heatmap:/var/globe_history"
      - "$DOCKERDIR/appdata/1090/timelapse:/var/timelapse1090"
      - "$DOCKERDIR/appdata/1090/collectd:/var/lib/collectd"
      - /proc/diskstats:/proc/diskstats:ro
    tmpfs:
      - /run:exec,size=64M
      - /var/log
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.1090-rtr.entrypoints=https"
      - "traefik.http.routers.1090-rtr.rule=HostHeader(`1090.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.1090-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.1090-rtr.service=1090-svc"
      - "traefik.http.services.1090-svc.loadbalancer.server.port=80"
        #- "traefik.http.services.1090-svc.loadbalancer.server.scheme=https"

  adsbx:
    image: ghcr.io/sdr-enthusiasts/docker-adsbexchange:latest
    tty: true
    container_name: adsbx
    <<: *common-keys-adsb
    environment:
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}m
      - SITENAME=${ADSBX_SITENAME}
      - UUID=${ADSBX_UUID}
      - TZ=${TZ}
    tmpfs:
      - /run:exec,size=64M,uid=1000,gid=1000
      - /var/log

  multifeeder:
    image: ghcr.io/sdr-enthusiasts/docker-multifeeder
    tty: true
    container_name: multifeeder
    hostname: multifeeder
    <<: *common-keys-adsb
    environment:
      - TZ=${TZ}
      - READSB_NET_CONNECTOR=beast.${DOMAINLOCAL},30005,beast_in;beast.${DOMAINLOCAL},30978,raw_in;feed.adsb.fi,30004,beast_reduce_plus_out;feed.adsb.one,64004,beast_reduce_plus_out;in.adsb.lol,30004,beast_reduce_plus_out
      - UUID=fb259d69-565e-4f5e-91c5-25ea37f0c796
      - MLAT_CONFIG=feed.adsb.fi,31090,39000;feed.adsb.one,64006,39001;in.adsb.lol,31090,39002;feed.theairtraffic.com,31090,39003;
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_ALT=${FEEDER_ALT_M}m
    tmpfs:
      - /run/readsb
      - /var/log

  mlathub:
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest
    tty: true
    container_name: mlathub
    hostname: mlathub
    <<: *common-keys-adsb
    ports:
      - 30105:30105
    environment:
      - TZ=$TZ
      - DISABLE_PERFORMANCE_GRAPHS=true
      - DISABLE_WEBAPP=true
      - READSB_NET_ENABLE=true
      - READSB_NET_ONLY=true
      - READSB_FORWARD_MLAT=true
      - READSB_NET_CONNECTOR=piaware,30105,beast_in;adsbx,30105,beast_in;rbfeeder,30105,beast_in;multifeeder,39000,beast_in;multifeeder,39001,beast_in;multifeeder,39002,beast_in;multifeeder,39003,beast_in
      - READSB_NET_BEAST_OUTPUT_PORT=30105

  fr24:
    image: ghcr.io/sdr-enthusiasts/docker-flightradar24:latest
    tty: true
    container_name: fr24
    <<: *common-keys-adsb
    environment:
      - BEASTHOST=beast.${DOMAINLOCAL}
        #- TZ=${TZ}
      - FR24KEY=${FR24_SHARING_KEY}
    tmpfs:
      - /var/log
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.fr-rtr.entrypoints=https"
      - "traefik.http.routers.fr-rtr.rule=HostHeader(`fr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.fr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.fr-rtr.service=fr-svc"
      - "traefik.http.services.fr-svc.loadbalancer.server.port=8754"

  piaware:
    image: ghcr.io/sdr-enthusiasts/docker-piaware:latest
    tty: true
    container_name: piaware
    <<: *common-keys-adsb
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - BEASTHOST=beast.${DOMAINLOCAL}
      - RECEIVER_TYPE=relay
      - VERBOSE_LOGGING=true
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TZ=${TZ}
      - FEEDER_ID=${PIAWARE_FEEDER_ID}
      - UAT_RECEIVER_TYPE=relay
      - UAT_RECEIVER_HOST=beast.${DOMAINLOCAL}
      - UAT_RECEIVER_PORT=30978
      #- MLAT_RESULTS_BEASTHOST=mlathub
    volumes:
      - $DOCKERDIR/appdata/piaware/piaware.conf:/etc/piaware.conf
    tmpfs:
      - /run:exec,size=64M
      - /var/log
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sa-rtr.entrypoints=https"
      - "traefik.http.routers.sa-rtr.rule=HostHeader(`sa.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.sa-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sa-rtr.service=sa-svc"
      - "traefik.http.services.sa-svc.loadbalancer.server.port=8080" 

  adsbhub:
    image: ghcr.io/sdr-enthusiasts/docker-adsbhub:latest
    tty: true
    container_name: adsbhub
    <<: *common-keys-adsb
    environment:
      - TZ=${TZ}
      - SBSHOST=beast.${DOMAINLOCAL}
      - CLIENTKEY=${ADSBHUB_STATION_KEY}

  rbfeeder:
    image: ghcr.io/sdr-enthusiasts/docker-radarbox:latest
    tty: true
    container_name: rbfeeder
    <<: *common-keys-adsb
    environment:
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}
      - TZ=${TZ}
      - SHARING_KEY=${RADARBOX_SHARING_KEY}
      - UAT_RECEIVER_HOST=beast.${DOMAINLOCAL}
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  radarvirtuel:
    image: ghcr.io/sdr-enthusiasts/docker-radarvirtuel:latest
    tty: true
    container_name: radarvirtuel
    hostname: radarvirtuel
    <<: *common-keys-adsb
    environment:
      - FEEDER_KEY=${RV_FEEDER_KEY}
      - SOURCE_HOST=beast.${DOMAINLOCAL}:30002
      - RV_SERVER=mg22.adsbnetwork.com:50050
      - VERBOSE=OFF
      - MLAT_SERVER=mlat.adsbnetwork.com:50000
      - MLAT_HOST=beast.${DOMAINLOCAL}:30005
      - LAT=${FEEDER_LAT}
      - LON=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"

  opensky:
    image: ghcr.io/sdr-enthusiasts/docker-opensky-network:latest
    tty: true
    container_name: opensky
    <<: *common-keys-adsb
    environment:
      - TZ=${TZ}
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}
      - OPENSKY_USERNAME=${OPENSKY_USERNAME}
      - OPENSKY_SERIAL=${OPENSKY_SERIAL}
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  pfclient:
    image: ghcr.io/sdr-enthusiasts/docker-planefinder:latest
    tty: true
    container_name: pfclient
    <<: *common-keys-adsb
    environment:
      - TZ=${TZ}
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - SHARECODE=${PLANEFINDER_SHARECODE}
    tmpfs:
      - /run:exec,size=64M
      - /var/log/pfclienot
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pf-rtr.entrypoints=https"
      - "traefik.http.routers.pf-rtr.rule=HostHeader(`pf.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.pf-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.pf-rtr.service=pf-svc"
      - "traefik.http.services.pf-svc.loadbalancer.server.port=30053"

  planewatch:
    image: ghcr.io/plane-watch/docker-plane-watch:latest
    tty: true
    container_name: planewatch
    <<: *common-keys-adsb
    environment:
      - BEASTHOST=beast.${DOMAINLOCAL}
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}m
      - TZ=${TZ}
      - API_KEY=${PW_API_KEY}
    tmpfs:
      - /run:exec,size=64M
      - /var/log
  vrs:
    image: rhodan76/vrs:dev
    tty: true
    container_name: vrs
    hostname: vrs
    <<: *common-keys-adsb
    environment:
      - VRS_ADMIN_USERNAME=${VRS_USER}
      - VRS_ADMIN_PASSWORD=${VRS_PASSWORD}
      - VRS_CULTURE=en-US
      - VRS_DB_UPDATE_POLICY_FULLAUTO=yes
      - TZ=Etc/UTC
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M
    volumes:
      - "$DOCKERDIR/appdata/vrs/root:/root/.local/share/VirtualRadar"
      - "$DOCKERDIR/appdata/vrs/config:/config"
      - "/etc/localtime:/etc/localtime:ro"
        # - "/etc/timezone:/etc/timezone:ro"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.vrs-rtr.entrypoints=https"
      - "traefik.http.routers.vrs-rtr.rule=HostHeader(`vrs.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.vrs-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.vrs-rtr.service=vrs-svc"
      - "traefik.http.services.vrs-svc.loadbalancer.server.port=8080"

  planefence:
    image: kx1t/planefence
    tty: true
    container_name: planefence
    hostname: planefence
    # host and your internal network:
    <<: *common-keys-adsb
    # we are phasing out the .env file in favor of a similar file named
    # ~/.planefence/planefence.config. A template of that file will be
    # generated automatically when you start the container for the first
    # time. Planefence will not work unless you have either a .env file or
    # a planefence.config file. Any values defined in planefence.config
    # will take priority over those in .env. Uncomment the line below if you
    # really want to continue to use your pre-existing .env file.
    # Also, update TZ=America/New_York to your own timezone.
    #
    # LOGLEVEL can be "INFO" (default - all logs) or "ERROR" (only errors)
    environment:
      - TZ=$TZ
      - LOGLEVEL=INFO
    volumes:
      # adopt this one to point at your home directory if it is not /home/pi
      - $DOCKERDIR/appdata/planefence/persist:/usr/share/planefence/persist
      # the following exposes the html directory to the host, in case you
      # want to use an external http daemon (lighttpd, nginx, etc)
      - $DOCKERDIR/appdata/planefence/html:/usr/share/planefence/html
    tmpfs:
      - /run:rw,nosuid,nodev,exec,relatime,size=512M
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.planefence-rtr.entrypoints=https"
      - "traefik.http.routers.planefence-rtr.rule=HostHeader(`planefence.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.planefence-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.planefence-rtr.service=planefence-svc"
      - "traefik.http.services.planefence-svc.loadbalancer.server.port=80"

  screenshot:
    image: tedder42/browser-screenshot-service:latest
    tty: true
    container_name: screenshot
    hostname: screenshot
    <<: *common-keys-adsb
    shm_size: 1gb
    environment:
      - MAP_ARGS=zoom=11&hideSidebar&hideButtons&mapDim=2.0&monochromeMarkers=ff0000&outlineColor=505050&iconScale=1.5
      #- MAP_ARGS=zoom=11&hideSidebar&hideButtons&mapDim=0.4&monochromeMarkers=00066&monochromeTracks=010101&outlineColor=505050&iconScale=1.5
      - LOAD_SLEEP_TIME=10
      - BASE_URL=http://tar1090
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pss-rtr.entrypoints=https"
      - "traefik.http.routers.pss-rtr.rule=HostHeader(`pss.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.pss-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.pss-rtr.service=pss-svc"
      - "traefik.http.services.pss-svc.loadbalancer.server.port=80"

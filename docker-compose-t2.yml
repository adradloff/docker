version: "3.9"

######### IMPORTANT #############
# This is my main docker-compose file with most of the apps. I run docker on other systems with smaller stacks (web and synology).
# You can copy-paste services from one docker-compose file in this repo to another to add other apps.

########################### SYSTEM DESCRIPTION
# DOCKER-COMPOSE FOR HOME/MEDIA SERVER
# PROXMOX HOST: Dual Intel Xeon 5420, 16 GB RAM, 240 GB SSD, and 2 TB HDD
# VM: 6 CORES, 12 GB RAM, Ubuntu 20.04, and Docker
# 32 GB for /, 64 GB for /var/lib/docker and transcoding, and 1.5 TB for non-critical data and rclone cache.
# Google Drive mounted using Rclone Docker for media and Proxmox backups

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  zsocket_proxy:
    name: zsocket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  cf_email:
    file: $DOCKERDIR/secrets/cf_email
  cf_api_key:
    file: $DOCKERDIR/secrets/cf_api_key
  cf_token:
    file: $DOCKERDIR/secrets/cf_token
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  authelia_jwt_secret:
    file: $DOCKERDIR/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DOCKERDIR/secrets/authelia_session_secret
  authelia_storage_mysql_password:
    file: $DOCKERDIR/secrets/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: $DOCKERDIR/secrets/authelia_notifier_smtp_password
  authelia_duo_api_secret_key:
    file: $DOCKERDIR/secrets/authelia_duo_api_secret_key
  authelia_storage_encryption_key:
    file: $DOCKERDIR/secrets/authelia_storage_encryption_key
  guac_db_name:
    file: $DOCKERDIR/secrets/guac_db_name
  guac_mysql_user:
    file: $DOCKERDIR/secrets/guac_mysql_user
  guac_mysql_password:
    file: $DOCKERDIR/secrets/guac_mysql_password
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password
  my_email:
    file: $DOCKERDIR/secrets/my_email
  plex_claim:
    file: $DOCKERDIR/secrets/plex_claim
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  # profiles:
  # - core

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  # profiles:
  # - apps

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"
  # profiles:
  # - media
  
########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/logs/homeserver/traefik.log # customize this
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:latest
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-authelia@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      zsocket_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/logs/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cf_email
      - CF_API_KEY_FILE=/run/secrets/cf_api_key
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
    secrets:
      - cf_email
      - cf_api_key
      - htpasswd
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      zsocket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    #privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=1
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
      
  #### AUTHENTICATION 
  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:latest
    restart: always
    networks:
      - t2_proxy
      - default
    # ports:
    #   - "9091:9091"
    volumes:
      - $DOCKERDIR/appdata/authelia:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
     #- AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
      #- AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_mysql_password
     # - authelia_notifier_smtp_password
      - authelia_duo_api_secret_key
     #- authelia_storage_encryption_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    command: -H tcp://socket-proxy:2375
    networks:
      - t2_proxy
      - zsocket_proxy
    volumes:
      - $DOCKERDIR/appdata/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`) || (Host(`portainer.$DOMAINNAME`) && PathPrefix(`/api`))"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

############################# DATABASE

  # MariaDB - MySQL Database
  # After starting container for first time dexec and mysqladmin -u root password <password>
  mariadb:
    <<: *common-keys-core
    container_name: mariadb
    image: lscr.io/linuxserver/mariadb
    ports:
      - "$MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/appdata/mariadb:/config
    environment:
      <<: *default-tz-puid-pgid
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password

  # phpMyAdmin - Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      - PMA_HOST=$DB_HOST
      - PMA_PORT=$DB_PORT
      #- PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  qbittorrent:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    ports: 
      - "6881:6881"
      - "6881:6881/udp"
    volumes:
      - $DOCKERDIR/appdata/qbittorrent:/config
      - $DATADIR/Downloads:/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002
      WEBUI_PORT: 8168
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8168"

  ############################# INDEXERS

  # Jackett - Torrent proxy
  # Set url_base in Jackett settings if using PathPrefix
  jackett:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    # network_mode: container:transmission-vpn
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.200
    volumes:
      - $DOCKERDIR/appdata/jackett:/config
      - $DATADIR/Downloads/completed:/downloads
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"

  # Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.162
    # ports:
    #  - "$PROWLARR_PORT:9696"
    volumes:
      - $DOCKERDIR/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  ############################# PVRS

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.201
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      - $DATADIR/Downloads:/downloads
      - $DATADIR/Movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`movies.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`movies.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.202
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - $DATADIR/Downloads:/downloads
      - $DATADIR/Shows:/tv
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`tv.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`tv.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  ############################# MEDIA

  # Plex - Media Server
  plexms:
    <<: *common-keys-media
    image: plexinc/pms-docker:plexpass
    container_name: plexms
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "$PLEX_WEB_TOOLS_PORT:33400"
    devices:
      - /dev/dri:/dev/dri # for hardware transcoding
    volumes:
      - $DOCKERDIR/appdata/plexms:/config
      - $DATADIR:/media
      - /dev/shm:/transcode
    environment:
      TZ: $TZ
      HOSTNAME: "Silky Plex"
      PLEX_CLAIM_FILE: /run/secrets/plex_claim
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/,https://plex.$DOMAINNAME
    secrets:
      - plex_claim
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"

  # Tautulli - Previously PlexPy. Plex statistics and monitoring
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    <<: *common-keys-media
    image: linuxserver/tautulli:latest
    container_name: tautulli
    networks:
      - t2_proxy
    volumes:
      - $DOCKERDIR/appdata/tautulli/config:/config
      - $DOCKERDIR/appdata/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
    ## HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr-bypass.rule=Headers(`X-Api-Key`, `$TAUTULLI_DEVICE_KEY`) || Query(`apikey`, `$TAUTULLI_DEVICE_KEY`)"
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
        ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  ############################# MEDIA FILE MANAGEMENT
#Photo album
  piwigo:
    image: linuxserver/piwigo
    container_name: piwigo
    restart: always
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/appdata/piwigo/config:/config
      - /mnt/Media/Photos:/config/www/gallery/upload
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #ports:
     # - '$PIWIGO_PORT:80'
    labels:
      - "traefik.enable=true"
     ## HTTP Routers
      - "traefik.http.routers.piwigo-rtr.entrypoints=https"
      - "traefik.http.routers.piwigo-rtr.rule=Host(`photos.$DOMAINNAME`)"
      - "traefik.http.routers.piwigo-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.piwigo-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.piwigo-rtr.service=piwigo-svc"
      - "traefik.http.services.piwigo-svc.loadbalancer.server.port=80"

  ############################# UTILITIES

  # Glances - System Information
  glances:
    <<: *common-keys-apps
    image: nicolargo/glances:latest
    container_name: glances
    # network_mode: host
    networks:
      - t2_proxy
      - zsocket_proxy
      - default
    pid: host
    volumes:
      - $DOCKERDIR/appdata/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $USERDIR:/data/home:ro
      - $DATADIR:/RAID:ro
    environment:
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      - t2_proxy
      - zsocket_proxy
    # ports:
    #   - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - zsocket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    <<: *common-keys-core
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    environment:
      API_KEY: $CLOUDFLARE_API_TOKEN
      ZONE: $DOMAINNAME
      PROXIED: "true"
      RRTYPE: A
      DELETE_ON_STOP: "false"
      DNS_SERVER: 172.16.0.2
      
   # Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    <<: *common-keys-core
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    networks:
      - zsocket_proxy
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - DOCKER_HOST=tcp://socket-proxy:2375
      - CF_TOKEN__FILE=/run/secrets/cf_token
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
    secrets: # not working
      - cf_token
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=Host(Host(`pihole2.$DOMAINNAME`)"		  

#  ########Pi Hole##############
#
#  pihole: 
#    #<<: *default-tz-puid-pgid
#    container_name: pihole
#    domainname: radloff.local 
#    hostname: pihole
##    image: pihole/pihole:dev
#    image: pihole/pihole:latest
#    shm_size: '2g'
#    depends_on:
#      - dhcphelper
#    networks:
#      t2_proxy:
#        ipv4_address: $PIHOLE_TRAEFIK_IP
#    ports:  
#      - "$SERVER_IP:53:53/tcp"
#      - "$SERVER_IP:53:53/udp" 
#    restart: always
#    volumes:
#      #  - $DOCKERDIR/appdata/pihole/pihole:/etc/pihole
#      - $DOCKERDIR/appdata/pihole/pihole.log:/var/log/pihole.log
#      - $DOCKERDIR/appdata/pihole/dnsmasq.d:/etc/dnsmasq.d
#    cap_add:
#      - NET_ADMIN
#    environment:
#     # - FTLCONF_REPLY_ADDR4=$SERVER_IP
#      - PROXY_LOCATION=pihole
#      - VIRTUAL_HOST=pihole.$DOMAINNAME
#      - VIRTUAL_PORT=80
#      - TZ=$TZ
#      - WEBPASSWORD=
#      - PIHOLE_DNS_=192.168.90.251#5054
#      - WEBTHEME=default-dark
#      - DNSMASQ_LISTENING=all
#    labels:
#      - "traefik.enable=true"
##      - "traefik.backend=pihole"
##      - "traefik.port=80"
#     ## HTTP Routers
#      - "traefik.http.routers.pihole-rtr.entrypoints=https"
#      - "traefik.http.routers.pihole-rtr.rule=Host(`pihole.$DOMAINNAME`)"
#      - "traefik.http.routers.pihole-rtr.tls=true"
##      - "traefik.frontend.rule=HostRegexp:pihole.$DOMAINNAME,{catchall:.*}"
##      - "traefik.frontend.priority=1"
#      ## Middlewares
#      - "traefik.http.routers.pihole-rtr.middlewares=chain-authelia@file,add-pihole"
#      - "traefik.http.middlewares.add-pihole.addPrefix.prefix=/admin"
#      # HTTP Services
#      - "traefik.http.routers.pihole-rtr.service=pihole-svc"
#      - "traefik.http.services.pihole-svc.loadbalancer.server.port=80"
#
#  dhcphelper:
#    build: ./dhcp-helper
#    container_name: dhcp-helper
#    restart: always
#    network_mode: "host"
#    command: -s $PIHOLE_TRAEFIK_IP
#    cap_add:
#      - NET_ADMIN
#
#  cloudflared:
#    container_name: cloudflared
#    image: visibilityspots/cloudflared:latest
#    cap_add:
#      - NET_ADMIN
#    restart: always
#    networks:
#      t2_proxy:
#        ipv4_address: 192.168.90.251

#### VPN ###
#  gluetun:
#    image: qmcgaw/gluetun
#    container_name: gluetun
#    restart: always
#    networks:
#      t2_proxy:
#        ipv4_address: 192.168.90.252
#    cap_add:
#      - NET_ADMIN
#    #network_mode: bridge
#    ports:
#    #  - 8888:8888/tcp # HTTP proxy
#    #  - 8388:8388/tcp # Shadowsocks
#    #  - 8388:8388/udp # Shadowsocks
#    #  - 8000:8000/tcp # Built-in HTTP control server
#      - 51820:51820/udp
#    # command:
#    volumes:
#      - $DOCKERDIR/appdata/gluetun:/gluetun
#    environment:
#      # More variables are available, see the readme table
#      - OPENVPN_CUSTOM_CONFIG=/gluetun/vpn.conf
#      - OPENVPN_USER=$VPN_UN
#      - OPENVPN_PASSWORD=$VPN_PW
#      - VPNSP=vpn unlimited
#      # Timezone for accurate logs times
#      - TZ=$TZ
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.gluetun-vpn-rtr.entrypoints=https"
#      - "traefik.http.routers.gluetun-vpn-rtr.rule=Host(`gluetun.$DOMAINNAME`)"
#      ## Middlewares
#      - "traefik.http.routers.gluetun-vpn-rtr.middlewares=middlewares-rate-limit@file"
#      ## HTTP Services
#      - "traefik.http.routers.gluetun-vpn-rtr.service=gluetun-vpn-svc"
#      - "traefik.http.services.gluetun-vpn-svc.loadbalancer.server.port=9091"
#  

  # UniFi Controller - Managing UniFi Network
  unifi:
    container_name: unifi
    image: jacobalberty/unifi:latest
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.100
    security_opt:
      - no-new-privileges:true
    ports:
      - "8080:8080"
      - "8443:8443"
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "6789:6789"
        #- "8880:8880"
    volumes:
      - $DOCKERDIR/appdata/unifi:/unifi
      - $DOCKERDIR/appdata/unifi/data:/unifi/data
      - $DOCKERDIR/appdata/unifi/log:/unifi/log
      - $DOCKERDIR/appdata/unifi/cert:/unifi/cert
      - $DOCKERDIR/appdata/unifi/init:/unifi/init.d
      - $DOCKERDIR/appdata/unifi/run:/var/run/unifi
      - $DOCKERDIR/shared/certs/key.pem:/unifi/cert/privkey.pem
      - $DOCKERDIR/shared/certs/cert.pem:/unifi/cert/cert.pem
    environment:
      UNIFI_UID: $PUID
      UNIFI_GID: $PGID
      TZ: America/Phoenix
      RUNAS_UID0: "false"
      BIND_PRIV: "false"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      - "traefik.http.routers.unifi-rtr.rule=HostHeader(`uni.$DOMAINNAME`)"
      #- "traefik.http.routers.unifi-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"
      #- "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      #
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    <<: *common-keys-apps
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none
      TZ: $TZ
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.199
     #ports:
     #  - "${PORT:-8191}:8191"
  sql-server-db:
    container_name: sql-server-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - "1433:1433"
    volumes:
      - ${DOCKERDIR}/appdata/mssql/data:/var/lib/mssqlql/data
    environment:
      SA_PASSWORD: "!!54testpassword45!!"
      ACCEPT_EULA: "Y"
